// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package queries

import (
	"context"
)

const listPropostas = `-- name: ListPropostas :many
WITH paged_propostas AS (
    SELECT id, status, name, assignee_id
    FROM propostas AS p
    WHERE
        p.id > $1
    ORDER BY p.id
    LIMIT $2
)

SELECT
    p.id,
    p.status,
    p.name,
    CASE
        WHEN u.id IS NULL THEN NULL
        ELSE json_build_object(
            'id', u.id,
            'email', u.email
        )
    END AS assignee,
    COALESCE(json_agg(
        json_build_object(
            'id', pa.id,
            'mimetype', pa.mimetype,
            'filename', pa.filename
        )
    ) FILTER (WHERE pa.id IS NOT NULL), '[]') AS attachments
FROM paged_propostas AS p

LEFT JOIN users AS u
    ON u.id = p.assignee_id
LEFT JOIN proposta_attachments AS pa
    ON pa.proposta_id = p.id

GROUP BY p.id, p.status, p.name, u.id, u.email
`

type ListPropostasParams struct {
	Cursor int32 `json:"cursor"`
	Limit  int32 `json:"limit"`
}

type ListPropostasRow struct {
	ID          int32          `json:"id"`
	Status      PropostaStatus `json:"status"`
	Name        string         `json:"name"`
	Assignee    interface{}    `json:"assignee"`
	Attachments interface{}    `json:"attachments"`
}

func (q *Queries) ListPropostas(ctx context.Context, arg ListPropostasParams) ([]ListPropostasRow, error) {
	rows, err := q.db.Query(ctx, listPropostas, arg.Cursor, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPropostasRow
	for rows.Next() {
		var i ListPropostasRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Name,
			&i.Assignee,
			&i.Attachments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
