// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package propostas

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listPropostaAttachments = `-- name: ListPropostaAttachments :many
SELECT 
    pa.id,
    pa.proposta_id,
    pa.filename,
    pa.mimetype
FROM proposta_attachments AS pa
WHERE pa.proposta_id = ANY($1::int[])
`

func (q *Queries) ListPropostaAttachments(ctx context.Context, propostaIds []int32) ([]PropostaAttachment, error) {
	rows, err := q.db.Query(ctx, listPropostaAttachments, propostaIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropostaAttachment
	for rows.Next() {
		var i PropostaAttachment
		if err := rows.Scan(
			&i.ID,
			&i.PropostaID,
			&i.Filename,
			&i.Mimetype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPropostas = `-- name: ListPropostas :many
SELECT 
    p.id,
    p.status,
    p.name,
    u.id AS assignee_id,
    u.email AS assignee_email
FROM propostas AS p
LEFT JOIN users AS u
    ON u.id = p.assignee_id
WHERE p.id > $1
ORDER BY p.id ASC
LIMIT $2
`

type ListPropostasParams struct {
	Cursor int32 `json:"cursor"`
	Limit  int32 `json:"limit"`
}

type ListPropostasRow struct {
	ID            int32          `json:"id"`
	Status        PropostaStatus `json:"status"`
	Name          string         `json:"name"`
	AssigneeID    pgtype.Int4    `json:"assignee_id"`
	AssigneeEmail pgtype.Text    `json:"assignee_email"`
}

func (q *Queries) ListPropostas(ctx context.Context, arg ListPropostasParams) ([]ListPropostasRow, error) {
	rows, err := q.db.Query(ctx, listPropostas, arg.Cursor, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPropostasRow
	for rows.Next() {
		var i ListPropostasRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Name,
			&i.AssigneeID,
			&i.AssigneeEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
